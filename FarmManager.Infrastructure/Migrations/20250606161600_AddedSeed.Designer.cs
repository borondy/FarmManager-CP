// <auto-generated />
using System;
using FarmManager.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FarmManager.Infrastructure.Migrations
{
    [DbContext(typeof(FarmManagerDbContext))]
    [Migration("20250606161600_AddedSeed")]
    partial class AddedSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("FarmManager.Domain.Entities.CropRotationPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FieldId")
                        .IsUnique();

                    b.ToTable("CropRotationPlans");
                });

            modelBuilder.Entity("FarmManager.Domain.Entities.CropType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CropRotationPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HarvestingPeriodId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CropRotationPlanId");

                    b.HasIndex("HarvestingPeriodId");

                    b.ToTable("CropTypes");
                });

            modelBuilder.Entity("FarmManager.Domain.Entities.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AreaInHectares")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaInHectares = 14.699999999999999,
                            Name = "95"
                        },
                        new
                        {
                            Id = 2,
                            AreaInHectares = 4.7999999999999998,
                            Name = "96"
                        },
                        new
                        {
                            Id = 3,
                            AreaInHectares = 2.2999999999999998,
                            Name = "97"
                        },
                        new
                        {
                            Id = 4,
                            AreaInHectares = 1.3999999999999999,
                            Name = "102"
                        },
                        new
                        {
                            Id = 5,
                            AreaInHectares = 3.6000000000000001,
                            Name = "103"
                        },
                        new
                        {
                            Id = 6,
                            AreaInHectares = 2.8999999999999999,
                            Name = "106"
                        },
                        new
                        {
                            Id = 7,
                            AreaInHectares = 8.9000000000000004,
                            Name = "169"
                        },
                        new
                        {
                            Id = 8,
                            AreaInHectares = 2.1000000000000001,
                            Name = "196"
                        },
                        new
                        {
                            Id = 9,
                            AreaInHectares = 11.82,
                            Name = "Kaszáló"
                        },
                        new
                        {
                            Id = 10,
                            AreaInHectares = 7.9000000000000004,
                            Name = "10236"
                        },
                        new
                        {
                            Id = 11,
                            AreaInHectares = 5.1500000000000004,
                            Name = "199"
                        },
                        new
                        {
                            Id = 12,
                            AreaInHectares = 8.4600000000000009,
                            Name = "201"
                        },
                        new
                        {
                            Id = 13,
                            AreaInHectares = 6.8200000000000003,
                            Name = "207"
                        });
                });

            modelBuilder.Entity("FarmManager.Domain.Entities.MonthPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CropTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PeriodEndingMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PeriodStartingMonth")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CropTypeId");

                    b.ToTable("MonthPeriods");
                });

            modelBuilder.Entity("FarmManager.Domain.Entities.CropRotationPlan", b =>
                {
                    b.HasOne("FarmManager.Domain.Entities.Field", "Field")
                        .WithOne("CropRotationPlan")
                        .HasForeignKey("FarmManager.Domain.Entities.CropRotationPlan", "FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("FarmManager.Domain.Entities.CropType", b =>
                {
                    b.HasOne("FarmManager.Domain.Entities.CropRotationPlan", null)
                        .WithMany("PlannedCrops")
                        .HasForeignKey("CropRotationPlanId");

                    b.HasOne("FarmManager.Domain.Entities.MonthPeriod", "HarvestingPeriod")
                        .WithMany()
                        .HasForeignKey("HarvestingPeriodId");

                    b.Navigation("HarvestingPeriod");
                });

            modelBuilder.Entity("FarmManager.Domain.Entities.MonthPeriod", b =>
                {
                    b.HasOne("FarmManager.Domain.Entities.CropType", null)
                        .WithMany("SeedingPeriods")
                        .HasForeignKey("CropTypeId");
                });

            modelBuilder.Entity("FarmManager.Domain.Entities.CropRotationPlan", b =>
                {
                    b.Navigation("PlannedCrops");
                });

            modelBuilder.Entity("FarmManager.Domain.Entities.CropType", b =>
                {
                    b.Navigation("SeedingPeriods");
                });

            modelBuilder.Entity("FarmManager.Domain.Entities.Field", b =>
                {
                    b.Navigation("CropRotationPlan");
                });
#pragma warning restore 612, 618
        }
    }
}
